[{"C:\\Users\\Michael\\Documents\\Travel log\\Client\\src\\index.js":"1","C:\\Users\\Michael\\Documents\\Travel log\\Client\\src\\App.js":"2","C:\\Users\\Michael\\Documents\\Travel log\\Client\\src\\components\\Map.js":"3","C:\\Users\\Michael\\Documents\\Travel log\\Client\\src\\components\\Modal.js":"4","C:\\Users\\Michael\\Documents\\Travel log\\Client\\src\\components\\Controls.js":"5","C:\\Users\\Michael\\Documents\\Travel log\\Client\\src\\components\\Backdrop.js":"6","C:\\Users\\Michael\\Documents\\Travel log\\Client\\src\\components\\Entry.js":"7","C:\\Users\\Michael\\Documents\\Travel log\\Client\\src\\components\\AddEntry.js":"8"},{"size":230,"mtime":1607632829694,"results":"9","hashOfConfig":"10"},{"size":778,"mtime":1607632829684,"results":"11","hashOfConfig":"10"},{"size":4520,"mtime":1607653908153,"results":"12","hashOfConfig":"10"},{"size":960,"mtime":1607632829693,"results":"13","hashOfConfig":"10"},{"size":424,"mtime":1607632829689,"results":"14","hashOfConfig":"10"},{"size":275,"mtime":1607632829687,"results":"15","hashOfConfig":"10"},{"size":1430,"mtime":1615654958141,"results":"16","hashOfConfig":"10"},{"size":4001,"mtime":1615660218890,"results":"17","hashOfConfig":"10"},{"filePath":"18","messages":"19","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},"1g5wa7l",{"filePath":"21","messages":"22","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"23","messages":"24","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"25","usedDeprecatedRules":"20"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\Michael\\Documents\\Travel log\\Client\\src\\index.js",[],["36","37"],"C:\\Users\\Michael\\Documents\\Travel log\\Client\\src\\App.js",[],"C:\\Users\\Michael\\Documents\\Travel log\\Client\\src\\components\\Map.js",["38"],"import React from 'react';\r\nimport ReactMapGL, {Marker} from 'react-map-gl';\r\nimport Controls from './Controls';\r\nimport Geocoder from 'react-mapbox-gl-geocoder';\r\nimport './Map.css';\r\nimport openSocket from 'socket.io-client';\r\n\r\n\r\nclass Map extends React.Component {\r\n    state = {\r\n        startScreen: true,\r\n        viewport: {\r\n          latitude: 37,\r\n          longitude: -95,\r\n          zoom: 3,\r\n          bearing: 0,\r\n          pitch: 0\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        const socket = openSocket(process.env.REACT_APP_SERVER_URL)\r\n\r\n        fetch(process.env.REACT_APP_SERVER_URL + \"api/markers\")\r\n            .then(data => {\r\n                return data.json()\r\n            }).then(res => {\r\n                this.setState({markers: res.markers})\r\n            }).then(res => {\r\n                socket.on('entries', data => {\r\n                    if(data.action === 'newEntry'){\r\n                        this.setState({markers: [...this.state.markers, data.marker]})\r\n                    }\r\n                })\r\n            })\r\n\r\n        \r\n    }\r\n\r\n\r\n    zoomIn = () => {\r\n        if(this.state.viewport.zoom>=24){\r\n            return\r\n        }\r\n        this.setState({viewport: {...this.state.viewport, zoom: this.state.viewport.zoom + 1}})\r\n    }\r\n\r\n    zoomOut = () => {\r\n        if(this.state.viewport.zoom<=0){\r\n            return\r\n        }\r\n        this.setState({viewport: {...this.state.viewport, zoom: this.state.viewport.zoom - 1}})\r\n    }\r\n    \r\n    selectEntry = (entryID) => {\r\n        this.props.modalRender(\"selectEntry\", entryID)\r\n    }\r\n\r\n    newMarker = (evt) => {\r\n        this.setState({viewport: {...this.state.viewport, latitude: evt.lngLat[1], longitude: evt.lngLat[0]}})\r\n        this.props.modalRender(\"addEntry\", \"\", this.state.viewport.latitude, this.state.viewport.longitude)\r\n    }\r\n\r\n    onSelected = (viewport, item) => {      \r\n        this.setState({\r\n          viewport\r\n        })\r\n    }\r\n\r\n    enterApp = () => {\r\n        this.setState({startScreen: false})\r\n    }\r\n    \r\n    render() {\r\n\r\n\r\n        let markers;\r\n\r\n        if(this.state.markers && !this.state.startScreen){\r\n            markers = this.state.markers.map((entry, idx) => {\r\n                return (\r\n                    <Marker key={idx} latitude={entry.latitude} longitude={entry.longitude} offsetLeft={-15} offsetTop={-28}>\r\n                        <img style={{marginBottom: \"15\"}} src=\"/map-pin-blue.png\" width=\"30px\" height=\"30px\" onClick={() => this.selectEntry(entry.LogEntryID)} />\r\n                    </Marker>)\r\n            })\r\n        } else {\r\n            markers = null;\r\n        }\r\n\r\n        let tools\r\n\r\n        if(this.state.startScreen === false){\r\n            tools = (<React.Fragment>\r\n                <Controls zoomIn={this.zoomIn} zoomOut={this.zoomOut} /> \r\n                <Geocoder                \r\n                    mapboxApiAccessToken={process.env.REACT_APP_MAPBOX_API}                \r\n                    onSelected={this.onSelected}                \r\n                    viewport={this.state.viewport}                \r\n                    hideOnSelect={true}                \r\n                    value=\"\"                \r\n                />\r\n                </React.Fragment>)\r\n        } else {\r\n            tools = null\r\n        }\r\n\r\n        let startScreen\r\n\r\n        if(this.state.startScreen){\r\n            startScreen = \r\n                <div class=\"startScreen\">\r\n                    <h1>WELCOME TO THE MAP APP</h1>\r\n                    <button class=\"btn\" type=\"click\" onClick={this.enterApp}>ENTER</button>\r\n                </div>\r\n        } else {\r\n            startScreen = null\r\n        }\r\n\r\n        return (\r\n            <React.Fragment>\r\n                {startScreen}\r\n                {tools}\r\n                <div className=\"project\"><a href=\"https://github.com/MichaelC1999/map-app\">Project</a></div>             \r\n                <ReactMapGL\r\n                    {...this.state.viewport}\r\n                    width=\"100vw\"\r\n                    height=\"100vh\"\r\n                    mapStyle=\"mapbox://styles/cm172596/cki87vss16v031apa2us3ckho\"\r\n                    \r\n                    onViewportChange={viewport => this.setState({viewport})}\r\n                    mapboxApiAccessToken={process.env.REACT_APP_MAPBOX_API}\r\n                    onClick={this.state.startScreen ? null : this.newMarker}>\r\n                    {markers}\r\n                </ReactMapGL>\r\n            </React.Fragment>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Map;\r\n","C:\\Users\\Michael\\Documents\\Travel log\\Client\\src\\components\\Modal.js",[],"C:\\Users\\Michael\\Documents\\Travel log\\Client\\src\\components\\Controls.js",[],"C:\\Users\\Michael\\Documents\\Travel log\\Client\\src\\components\\Backdrop.js",[],"C:\\Users\\Michael\\Documents\\Travel log\\Client\\src\\components\\Entry.js",["39"],"C:\\Users\\Michael\\Documents\\Travel log\\Client\\src\\components\\AddEntry.js",[],{"ruleId":"40","replacedBy":"41"},{"ruleId":"42","replacedBy":"43"},{"ruleId":"44","severity":1,"message":"45","line":83,"column":25,"nodeType":"46","endLine":83,"endColumn":163},{"ruleId":"44","severity":1,"message":"45","line":21,"column":102,"nodeType":"46","endLine":21,"endColumn":159},"no-native-reassign",["47"],"no-negated-in-lhs",["48"],"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","no-global-assign","no-unsafe-negation"]